import asyncio
import sys
import os
import time
from datetime import datetime, timedelta
from typing import List, Tuple


def generate_test_dates(start_date: str, days_count: int) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞—Ç"""
    start = datetime.strptime(start_date, "%Y-%m-%d")
    return [(start + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(days_count)]


def run_sync_parser(dates: List[str]) -> Tuple[float, int, int]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {len(dates)} –¥–∞—Ç...")

    sync_path = os.path.join(os.path.dirname(__file__), "sync")
    sys.path.insert(0, sync_path)

    modules_to_clear = ["spimex_parser", "database", "config", "constants"]
    for module in modules_to_clear:
        if module in sys.modules:
            del sys.modules[module]

    try:
        from spimex_parser import parse_bulletin_for_date, clear_page_cache

        clear_page_cache()
        start_time = time.time()

        success_count = 0
        total_records = 0

        for date_str in dates:
            try:
                import io
                from contextlib import redirect_stdout

                f = io.StringIO()
                with redirect_stdout(f):
                    parse_bulletin_for_date(date_str)

                output = f.getvalue()
                if "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:" in output:
                    records = int(output.split("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:")[-1].strip())
                    total_records += records
                    success_count += 1
                elif "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∑–∞" in output and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç" in output:
                    success_count += 1

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {date_str}: {e}")

        end_time = time.time()
        execution_time = end_time - start_time

        return execution_time, success_count, total_records

    finally:
        if sync_path in sys.path:
            sys.path.remove(sync_path)

        for module in modules_to_clear:
            if module in sys.modules:
                del sys.modules[module]


async def run_async_parser(dates: List[str]) -> Tuple[float, int, int]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print(f"‚ö° –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {len(dates)} –¥–∞—Ç...")

    async_path = os.path.join(os.path.dirname(__file__), "async")
    sys.path.insert(0, async_path)

    modules_to_clear = ["spimex_parser", "database", "config", "constants"]
    for module in modules_to_clear:
        if module in sys.modules:
            del sys.modules[module]

    try:
        from spimex_parser import parse_multiple_dates, clear_page_cache

        clear_page_cache()
        start_time = time.time()

        results = await parse_multiple_dates(dates, max_concurrent=50)

        end_time = time.time()
        execution_time = end_time - start_time

        success_count = sum(1 for result in results if result is not None)
        total_records = sum(len(result) for result in results if result is not None)

        return execution_time, success_count, total_records

    finally:
        if async_path in sys.path:
            sys.path.remove(async_path)

        for module in modules_to_clear:
            if module in sys.modules:
                del sys.modules[module]


def format_time(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
    if seconds < 60:
        return f"{seconds:.2f}—Å"
    else:
        minutes = int(seconds // 60)
        secs = seconds % 60
        return f"{minutes}–º {secs:.2f}—Å"


def calculate_speed(dates_count: int, execution_time: float) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç/—Å–µ–∫"""
    return dates_count / execution_time if execution_time > 0 else 0


async def run_benchmark(test_dates: List[str]) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""

    print("üèÅ SPIMEX –ü–∞—Ä—Å–µ—Ä - –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 70)
    print(f"üìÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç—ã: {len(test_dates)} –¥–∞—Ç")
    print(f"üìä –ü–µ—Ä–∏–æ–¥: {test_dates[0]} - {test_dates[-1]}")
    print("=" * 70)

    results = {}

    try:
        sync_time, sync_success, sync_records = run_sync_parser(test_dates)
        results["sync"] = {
            "time": sync_time,
            "success": sync_success,
            "records": sync_records,
            "speed": calculate_speed(len(test_dates), sync_time),
        }
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {format_time(sync_time)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        results["sync"] = None

    print("-" * 50)

    try:
        async_time, async_success, async_records = await run_async_parser(test_dates)
        results["async"] = {
            "time": async_time,
            "success": async_success,
            "records": async_records,
            "speed": calculate_speed(len(test_dates), async_time),
        }
        print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {format_time(async_time)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        results["async"] = None

    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ù–ß–ú–ê–†–ö–ê")
    print("=" * 70)

    if results["sync"] and results["async"]:
        sync_r = results["sync"]
        async_r = results["async"]

        print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞—Ç:")
        print(f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π:  {sync_r['success']}/{len(test_dates)}")
        print(f"   ‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π: {async_r['success']}/{len(test_dates)}")

        print(f"\nüìä –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π:  {format_time(sync_r['time'])}")
        print(f"   ‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π: {format_time(async_r['time'])}")

        print(f"\n‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π:  {sync_r['speed']:.2f} –¥–∞—Ç/—Å–µ–∫")
        print(f"   ‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π: {async_r['speed']:.2f} –¥–∞—Ç/—Å–µ–∫")

        if sync_r["records"] > 0 or async_r["records"] > 0:
            print(f"\nüíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:")
            print(f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π:  {sync_r['records']:,}")
            print(f"   ‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π: {async_r['records']:,}")

        if sync_r["time"] > 0 and async_r["time"] > 0:
            speedup = sync_r["time"] / async_r["time"]
            if speedup > 1:
                print(f"\nüöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤ {speedup:.2f}x –±—ã—Å—Ç—Ä–µ–µ!")
            else:
                print(f"\nüêå –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±—ã—Å—Ç—Ä–µ–µ –≤ {1/speedup:.2f}x")

            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            if speedup > 2:
                print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
            elif speedup > 1.5:
                print("   ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            else:
                print("   ü§î –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞")

    print("=" * 70)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SPIMEX –ë–µ–Ω—á–º–∞—Ä–∫ - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤")
    print("=" * 70)
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 30 –¥–∞—Ç –Ω–∞—á–∏–Ω–∞—è —Å 2023-01-25")
    print("=" * 70)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 30 —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞—Ç
    test_dates = generate_test_dates("2023-01-25", 30)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
    asyncio.run(run_benchmark(test_dates))


if __name__ == "__main__":
    main()
