from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional
from datetime import date, datetime
import uvicorn

import sys
from pathlib import Path

async_parser_path = Path(__file__).parent.parent
sys.path.insert(0, str(async_parser_path))

from models.schemas import (
    TradingResultResponse,
    TradingDynamicsResponse,
    LastTradingDatesResponse,
    TradingResultFilter,
    DynamicsFilter,
)
from .services.trading_service import TradingService
from .services.cache_service import CacheService
from config import api_settings as settings

from init_db import init_async_database

app = FastAPI(
    title="SPIMEX Trading Results API",
    description="API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ SPIMEX",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

trading_service = TradingService()
cache_service = CacheService()


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await init_async_database()
    await cache_service.init_redis()
    print("‚úÖ API —Å–µ—Ä–≤–∏—Å SPIMEX –∑–∞–ø—É—â–µ–Ω")


@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    await cache_service.close()
    print("üîÑ API —Å–µ—Ä–≤–∏—Å SPIMEX –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@app.get("/", tags=["–û–±—â–∏–µ"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "service": "SPIMEX Trading Results API",
        "version": "1.0.0",
        "status": "running",
        "endpoints": {
            "last_trading_dates": "/api/v1/last-trading-dates",
            "dynamics": "/api/v1/dynamics",
            "trading_results": "/api/v1/trading-results",
        },
        "docs": "/docs",
    }


@app.get("/health", tags=["–û–±—â–∏–µ"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        redis_status = await cache_service.ping()
        db_status = await trading_service.health_check()

        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "services": {
                "database": "ok" if db_status else "error",
                "redis": "ok" if redis_status else "error",
            },
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "timestamp": datetime.now().isoformat(),
            "error": str(e),
        }


@app.get(
    "/api/v1/last-trading-dates",
    response_model=LastTradingDatesResponse,
    tags=["–¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"],
)
async def get_last_trading_dates(
    limit: int = Query(
        default=10,
        ge=1,
        le=100,
        description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π (1-100)",
    )
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)

    **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**
    - limit - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è
      –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        cache_key = f"last_trading_dates:{limit}"

        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return cached_result

        dates = await trading_service.get_last_trading_dates(limit)

        result = LastTradingDatesResponse(dates=dates, count=len(dates))

        await cache_service.set(cache_key, result.dict())

        return result

    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )


@app.get(
    "/api/v1/dynamics", response_model=TradingDynamicsResponse, tags=["–¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"]
)
async def get_dynamics(
    start_date: date = Query(
        ...,
        description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)",
    ),
    end_date: date = Query(
        ...,
        description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)",
    ),
    oil_id: Optional[str] = Query(
        None,
        description="ID –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–∞ (4 —Å–∏–º–≤–æ–ª–∞)",
    ),
    delivery_type_id: Optional[str] = Query(
        None,
        description="ID —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (1 —Å–∏–º–≤–æ–ª)",
    ),
    delivery_basis_id: Optional[str] = Query(
        None,
        description="ID –±–∞–∑–∏—Å–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (3 —Å–∏–º–≤–æ–ª–∞)",
    ),
    limit: int = Query(1000, ge=1, le=10000, description="–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π (1-10000)"),
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ç–æ—Ä–≥–æ–≤ –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - **start_date**: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
    - **end_date**: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
    - **oil_id**: ID –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    - **delivery_type_id**: ID —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    - **delivery_basis_id**: ID –±–∞–∑–∏—Å–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    - **limit**: –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)

    **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**
    - start_date, end_date - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    - –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        if start_date > end_date:
            raise HTTPException(
                status_code=400,
                detail="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è",
            )

        filter_params = DynamicsFilter(
            start_date=start_date,
            end_date=end_date,
            oil_id=oil_id,
            delivery_type_id=delivery_type_id,
            delivery_basis_id=delivery_basis_id,
            limit=limit,
        )

        cache_key = f"dynamics:{filter_params.cache_key()}"

        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return TradingDynamicsResponse(**cached_result)

        results = await trading_service.get_dynamics(filter_params)

        response = TradingDynamicsResponse(
            results=results,
            count=len(results),
            filter=filter_params.dict(exclude_none=True),
        )

        await cache_service.set(cache_key, response.dict())

        return response

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏: {str(e)}"
        )


@app.get(
    "/api/v1/trading-results",
    response_model=TradingResultResponse,
    tags=["–¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"],
)
async def get_trading_results(
    oil_id: Optional[str] = Query(None, description="ID –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–∞ (4 —Å–∏–º–≤–æ–ª–∞)"),
    delivery_type_id: Optional[str] = Query(
        None,
        description="ID —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (1 —Å–∏–º–≤–æ–ª)",
    ),
    delivery_basis_id: Optional[str] = Query(
        None,
        description="ID –±–∞–∑–∏—Å–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (3 —Å–∏–º–≤–æ–ª–∞)",
    ),
    limit: int = Query(
        100,
        ge=1,
        le=1000,
        description="–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π (1-1000)",
    ),
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - **oil_id**: ID –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    - **delivery_type_id**: ID —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    - **delivery_basis_id**: ID –±–∞–∑–∏—Å–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    - **limit**: –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)

    **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**
    - –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–∏–±–∫–æ—Å—Ç–∏
    - limit –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    - –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–∏ –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    """
    try:
        filter_params = TradingResultFilter(
            oil_id=oil_id,
            delivery_type_id=delivery_type_id,
            delivery_basis_id=delivery_basis_id,
            limit=limit,
        )

        cache_key = f"trading_results:{filter_params.cache_key()}"

        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return TradingResultResponse(**cached_result)

        results = await trading_service.get_trading_results(filter_params)

        response = TradingResultResponse(
            results=results,
            count=len(results),
            filter=filter_params.dict(exclude_none=True),
        )

        await cache_service.set(cache_key, response.dict())

        return response

    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}"
        )


@app.get("/api/v1/cache/stats", tags=["–ö—ç—à"])
async def get_cache_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    try:
        stats = await cache_service.get_stats()
        return stats
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )


@app.delete("/api/v1/cache/clear", tags=["–ö—ç—à"])
async def clear_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        await cache_service.clear_all()
        return {"message": "–ö—ç—à –æ—á–∏—â–µ–Ω", "timestamp": datetime.now().isoformat()}
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {str(e)}",
        )


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level="info",
    )
