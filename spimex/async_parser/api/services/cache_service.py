import json
import asyncio
from typing import Optional, Dict, Any
from datetime import datetime, time, timedelta
import redis.asyncio as aioredis
from redis.asyncio import Redis

import sys
from pathlib import Path

async_parser_path = Path(__file__).parent.parent.parent
sys.path.insert(0, str(async_parser_path))

from config import api_settings as settings


class CacheService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis –∫—ç—à–µ–º —Å –∞–≤—Ç–æ—Å–±—Ä–æ—Å–æ–º –≤ 14:11"""

    def __init__(self):
        self.redis: Optional[Redis] = None
        self.cache_reset_time = time(14, 11)
        self._reset_task: Optional[asyncio.Task] = None
        self._stats = {"hits": 0, "misses": 0}

    async def init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            self.redis = aioredis.from_url(
                settings.REDIS_URL,
                encoding="utf-8",
                decode_responses=True,
                socket_connect_timeout=5,
                socket_keepalive=True,
                socket_keepalive_options={},
                health_check_interval=30,
            )

            await self.redis.ping()
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            self._reset_task = asyncio.create_task(self._schedule_cache_reset())

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            raise

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        if self._reset_task:
            self._reset_task.cancel()
            try:
                await self._reset_task
            except asyncio.CancelledError:
                pass

        if self.redis:
            await self.redis.close()

    async def ping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis"""
        try:
            if not self.redis:
                return False
            await self.redis.ping()
            return True
        except Exception:
            return False

    async def get(self, key: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞

        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            if not self.redis:
                return None

            cached_data = await self.redis.get(key)
            if cached_data:
                self._stats["hits"] += 1
                return json.loads(cached_data)
            else:
                self._stats["misses"] += 1
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            self._stats["misses"] += 1
            return None

    async def set(
        self, key: str, value: Dict[str, Any], ttl: Optional[int] = None
    ) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à

        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∫—ç—à –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –≤ 14:11)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            if not self.redis:
                return False

            if ttl is None:
                ttl = self._calculate_ttl_until_reset()

            json_data = json.dumps(value, default=str, ensure_ascii=False)
            await self.redis.setex(key, ttl, json_data)
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à {key}: {e}")
            return False

    async def delete(self, key: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ –∫—ç—à–∞

        Args:
            key: –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.redis:
                return False

            result = await self.redis.delete(key)
            return result > 0

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return False

    async def clear_all(self) -> bool:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à

        Returns:
            True –µ—Å–ª–∏ –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.redis:
                return False

            await self.redis.flushdb()
            print("üóëÔ∏è –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            return False

    async def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            if not self.redis:
                return {
                    "status": "disconnected",
                    "total_keys": 0,
                    "memory_usage": "0B",
                    "hits": self._stats["hits"],
                    "misses": self._stats["misses"],
                    "hit_rate": 0.0,
                    "expires_at": None,
                }

            info = await self.redis.info()

            db_info = await self.redis.info("keyspace")
            total_keys = 0
            if "db0" in db_info:
                keys_info = db_info["db0"]
                if "keys" in keys_info:
                    total_keys = keys_info["keys"]

            total_requests = self._stats["hits"] + self._stats["misses"]
            hit_rate = (
                (self._stats["hits"] / total_requests * 100)
                if total_requests > 0
                else 0.0
            )

            next_reset = self._get_next_reset_time()

            return {
                "status": "connected",
                "total_keys": total_keys,
                "memory_usage": self._format_bytes(info.get("used_memory", 0)),
                "hits": self._stats["hits"],
                "misses": self._stats["misses"],
                "hit_rate": round(hit_rate, 2),
                "expires_at": next_reset.isoformat() if next_reset else None,
                "redis_version": info.get("redis_version", "unknown"),
                "uptime_in_seconds": info.get("uptime_in_seconds", 0),
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
            return {
                "status": "error",
                "error": str(e),
                "hits": self._stats["hits"],
                "misses": self._stats["misses"],
                "hit_rate": 0.0,
            }

    def _calculate_ttl_until_reset(self) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å TTL –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –≤ 14:11

        Returns:
            TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        now = datetime.now()
        next_reset = self._get_next_reset_time()

        if next_reset:
            delta = next_reset - now
            return max(int(delta.total_seconds()), 60)

        return 3600

    def _get_next_reset_time(self) -> Optional[datetime]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞

        Returns:
            Datetime —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ –∏–ª–∏ None
        """
        now = datetime.now()
        today_reset = datetime.combine(now.date(), self.cache_reset_time)

        if now < today_reset:
            return today_reset
        else:
            tomorrow = now.date() + timedelta(days=1)
            return datetime.combine(tomorrow, self.cache_reset_time)

    async def _schedule_cache_reset(self):
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –≤ 14:11
        """
        while True:
            try:
                next_reset = self._get_next_reset_time()
                if not next_reset:
                    await asyncio.sleep(3600)
                    continue

                now = datetime.now()
                sleep_seconds = (next_reset - now).total_seconds()

                if sleep_seconds > 0:
                    print(
                        f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ—Å–±—Ä–æ—Å –∫—ç—à–∞: {next_reset.strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                    await asyncio.sleep(sleep_seconds)

                await self.clear_all()
                print(
                    f"üîÑ –ê–≤—Ç–æ—Å–±—Ä–æ—Å –∫—ç—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ {datetime.now().strftime('%H:%M:%S')}"
                )

                await asyncio.sleep(60)

            except asyncio.CancelledError:
                print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞ –∫—ç—à–∞: {e}")
                await asyncio.sleep(300)

    @staticmethod
    def _format_bytes(bytes_value: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–π—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥

        Args:
            bytes_value: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        for unit in ["B", "KB", "MB", "GB"]:
            if bytes_value < 1024.0:
                return f"{bytes_value:.1f}{unit}"
            bytes_value /= 1024.0
        return f"{bytes_value:.1f}TB"
