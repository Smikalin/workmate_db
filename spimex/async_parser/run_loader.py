import asyncio
from datetime import timedelta, datetime
from spimex_parser import parse_multiple_dates, clear_page_cache
from constants import DATE_FORMAT


def generate_dates(start: datetime, end: datetime):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
    d = start
    while d <= end:
        yield d.strftime(DATE_FORMAT)
        d += timedelta(days=1)


async def async_main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    start_date = datetime(2023, 1, 1)
    end_date = datetime.now()

    print("üöÄ SPIMEX –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ü–∞—Ä—Å–µ—Ä - –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 70)
    print(
        f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {start_date.strftime(DATE_FORMAT)} "
        f"–ø–æ {end_date.strftime(DATE_FORMAT)}"
    )
    print("‚ö° –†–µ–∂–∏–º: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–æ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)")
    print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: spimex_async_db")
    print("=" * 70)

    clear_page_cache()
    print("üóëÔ∏è –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü –æ—á–∏—â–µ–Ω")

    dates_list = list(generate_dates(start_date, end_date))
    total_dates = len(dates_list)

    print(f"üìä –í—Å–µ–≥–æ –¥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_dates}")
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...\n")

    start_time = datetime.now()

    try:
        results = await parse_multiple_dates(dates_list, max_concurrent=50)

        success_count = sum(1 for result in results if result is not None)
        total_records = sum(len(result) for result in results if result is not None)

        end_time = datetime.now()
        processing_time = end_time - start_time

        print("\n" + "=" * 70)
        print("üèÅ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞—Ç: {total_dates}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {total_dates - success_count}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time}")
        print(
            f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {total_dates / processing_time.total_seconds():.2f} –¥–∞—Ç/—Å–µ–∫"
        )
        print("=" * 70)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return


if __name__ == "__main__":
    asyncio.run(async_main())
