set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "${BLUE}üê≥ SPIMEX Docker Manager${NC}"
    echo -e "${BLUE}========================${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–º–æ—â–∏
show_help() {
    print_header
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  build      - –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤"
    echo "  start      - –ó–∞–ø—É—Å–∫ PostgreSQL"
    echo "  init-sync  - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo "  init-async - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo "  init-all   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–µ–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
    echo "  sync       - –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"
    echo "  async      - –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"
    echo "  api        - –ó–∞–ø—É—Å–∫ API –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"
    echo "  benchmark  - –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞"
    echo "  stop       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  clean      - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤"
    echo "  logs       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  status     - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  shell      - –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 build && $0 start && $0 init-all"
    echo "  $0 init-sync && $0 sync"
    echo "  $0 init-async && $0 async"
    echo "  $0 init-async && $0 api"
    echo "  $0 benchmark"
    echo "  $0 logs sync-parser"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    echo -e "${GREEN}üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...${NC}"
    docker-compose --env-file docker.env build
    echo -e "${GREEN}‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ PostgreSQL
start_database() {
    echo -e "${GREEN}üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...${NC}"
    docker-compose --env-file docker.env up -d postgres
    echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL...${NC}"
    sleep 10
    echo -e "${GREEN}‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ${NC}"
    echo -e "${CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './docker-run.sh init-sync' –∏–ª–∏ './docker-run.sh init-async' –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
run_sync() {
    echo -e "${GREEN}üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...${NC}"
    docker-compose --env-file docker.env --profile sync up sync-parser
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
run_async() {
    echo -e "${GREEN}‚ö° –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...${NC}"
    docker-compose --env-file docker.env --profile async up async-parser
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
run_api() {
    echo -e "${GREEN}üöÄ –ó–∞–ø—É—Å–∫ API –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...${NC}"
    echo -e "${YELLOW}üì° API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:18000${NC}"
    echo -e "${YELLOW}üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:18000/docs${NC}"
    docker-compose --env-file docker.env --profile api up redis api
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞
run_benchmark() {
    echo -e "${GREEN}üìä –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞...${NC}"
    docker-compose --env-file docker.env --profile benchmark up benchmark
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker-compose --env-file docker.env down
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
clean_all() {
    echo -e "${RED}üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤...${NC}"
    docker-compose --env-file docker.env down --rmi all --volumes --remove-orphans
    echo -e "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
show_logs() {
    if [ -z "$2" ]; then
        docker-compose --env-file docker.env logs -f
    else
        docker-compose --env-file docker.env logs -f "$2"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
    docker-compose --env-file docker.env ps
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
enter_shell() {
    if [ -z "$2" ]; then
        echo -e "${RED}‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞${NC}"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: postgres, redis, sync-parser, async-parser, api"
        exit 1
    fi
    docker-compose --env-file docker.env exec "$2" /bin/bash
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    build)
        build_images
        ;;
    start)
        start_database
        ;;
    init-sync)
        echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        docker-compose --env-file docker.env --profile sync-init run --rm sync-db-init
        ;;
    init-async)
        echo "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        docker-compose --env-file docker.env --profile async-init run --rm async-db-init
        ;;
    init-all)
        echo "üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–µ–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
        echo "üîß –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î..."
        docker-compose --env-file docker.env --profile sync-init run --rm sync-db-init
        echo "üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î..."
        docker-compose --env-file docker.env --profile async-init run --rm async-db-init
        echo "‚úÖ –û–±–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!"
        ;;
    sync)
        run_sync
        ;;
    async)
        run_async
        ;;
    api)
        run_api
        ;;
    benchmark)
        run_benchmark
        ;;
    stop)
        stop_containers
        ;;
    clean)
        clean_all
        ;;
    logs)
        show_logs "$@"
        ;;
    status)
        show_status
        ;;
    shell)
        enter_shell "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
        show_help
        exit 1
        ;;
esac
